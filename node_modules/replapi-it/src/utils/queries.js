queries = {
	"user": "query UserByUsername($username: String!) {userByUsername(username: $username){id, username, firstName, lastName, bio, isVerified, displayName, fullName, url, roles {id, name, tagline}, isLoggedIn, timeCreated, isHacker, languages {id}, image, followerCount, followCount, isFollowedByCurrentUser, isFollowingCurrentUser}}",
	"userRepls": "query UserByUsername($username: String!, $count: Int = 50) {userByUsername(username: $username){publicRepls(showUnnamed: true, count: $count){items{id, title, slug, description, isRenamed, user {username}, lang {id}, url, timeCreated, timeUpdated, hostedUrl}}}}",
	"clientUser": "query {currentUser {id, username, firstName, lastName, bio, isVerified, displayName, fullName, url, roles {id, name, tagline}, isLoggedIn, timeCreated, isHacker, languages {id}, image, email, state {id, skillLevel, interestedIn}, device {isMobile, isMac}, notificationCount}}",
	"replId": "query Repl($id: String!) {repl(id: $id) {... on Repl {id, title, slug, description, lang {id}, url, timeCreated, timeUpdated, hostedUrl}}}",
	"replUrl": "query Repl($url: String!) {repl(url: $url) {... on Repl {id, title, slug, description, lang {id}, url, timeCreated, timeUpdated, hostedUrl}}}",
	"createRepl": "mutation CreateRepl($input: CreateReplInput!) {createRepl(input: $input) {... on Repl {id, title, slug, description, lang {id}, url, timeCreated, timeUpdated, hostedUrl}}}",
	"deleteRepl": "mutation ReplsDashboardDeleteRepl($id: String!) {deleteRepl(id: $id){id}}",
	"dashboardItems": "query ReplsDashboardReplFolderList($path: String!, $starred: Boolean, $after: String) {currentUser {replFolderByPath(path: $path) {id, canEdit, canCreateSubFolders, parent {id}, folders {name, canEdit, timeCreated}, repls(starred: $starred, after: $after) {items {id, user {username}, config {isServer}}, pageInfo {nextCursor}}}}}",
	"dashboardCreateFolder": "mutation ReplsDashboardCreateReplFolder($name: String!, $parentId: String, $teamId: Int) {createReplFolder(name: $name, parentId: $parentId, teamId: $teamId) {id, ...ReplsDashboardFolderItemReplFolder, }}, fragment ReplsDashboardFolderItemReplFolder on ReplFolder {id, name, canEdit, pathnames, image, timeCreated, replsCount, folderType}",
	"dashboardDeleteFolder": "mutation ReplsDashboardFolderItemDelete($folderId: String!) {deleteReplFolder(folderId: $folderId) {id}}",
	"dashboardMoveItems": "mutation ReplsDashboardMoveItemsToFolder($replIds: [String!]!, $folderIds: [String!]!, $destFolderId: String!, $teamId: Int) {moveItemsToFolder(replIds: $replIds, folderIds: $folderIds, destFolderId: $destFolderId, teamId: $teamId) {... on Repl {id, ...ReplsDashboardReplItemRepl}, ... on ReplFolder {id, ...ReplsDashboardFolderItemReplFolder}}}, fragment ReplsDashboardReplItemRepl on Repl {id, ...ReplsDashboardReplItemActionsRepl, ...ReplLinkRepl, user {...UserLinkUser}}, fragment ReplsDashboardReplItemActionsRepl on Repl {id}, fragment ReplLinkRepl on Repl {id}, fragment UserLinkUser on User {id}, fragment ReplsDashboardFolderItemReplFolder on ReplFolder {id}",
	"userPosts": "query UserByUsername($username: String!) {userByUsername(username: $username){posts {items {id, title, body, voteCount, commentCount, timeCreated, timeUpdated, url, user {username}, board {id, name, description, slug, cta, titleCta, bodyCta, template, buttonCta, color, replRequired, isLocked, isAnswerable, isPrivate, timeCreated, timeUpdated, url, canPost}, repl {id}, votes {items {user {username}}}, isAnnouncement, isAuthor, canEdit, canComment, canVote, canPin, canSetType, canChangeBoard, canLock, hasVoted, canReport, hasReported, isAnswered, isAnswerable, answeredBy {username}}}}}",
	"leaderboard": "query {leaderboard {items {username}}}",
	"comment": "query Comment($id: Int!) {comment(id: $id) {id, body, voteCount, timeCreated, timeUpdated, user {username}, url, post {id}, parentComment {id}, isAuthor, canEdit, canVote, canComment, hasVoted, canReport, hasReported, isAnswer, canSelectAsAnswer, canUnselectAsAnswer}}",
	"userComments": "query UserByUsername($username: String!) {userByUsername(username: $username){comments(count: 50) {items {id, body, voteCount, timeCreated, timeUpdated, user {username}, url, post {id}, parentComment {id}, isAuthor, canEdit, canVote, canComment, hasVoted, canReport, hasReported, isAnswer, canSelectAsAnswer, canUnselectAsAnswer}}}}",
	"postComments": "query Post($id: Int!) {post(id: $post){id}}",
	"updateRepl": "mutation WorkspaceHeaderReplInfoUpdateRepl($input: UpdateReplInput!) {updateRepl(input: $input) {repl {id}}}",
	"forkRepl": "mutation ForkReplCreateRepl($input: CreateReplInput!) {createRepl(input: $input) {... on Repl {id}}}",
	"viewTrash": "query Query {clui {trash {view {...CluiOutput}}}}, fragment CluiOutput on CluiOutput {... on CluiSuccessOutput {message, json}, ... on CluiErrorOutput {error, json}, ... on CluiMarkdownOutput {markdown}, ... on CluiComponentOutput {component}, ... on CluiTableOutput {columns {label, key}, rows}}",
	"restoreRepl": "mutation Mutation($title: String!) {clui {trash {restore(title: $title) {...CluiOutput}}}}, fragment CluiOutput on CluiOutput {... on CluiSuccessOutput {message, json}, ... on CluiErrorOutput {error, json}, ... on CluiMarkdownOutput {markdown}, ... on CluiComponentOutput {component}, ... on CluiTableOutput {columns {label, key}, rows}}",
	"changeUsername": "mutation Mutation($username: String!) {clui {account {changeUsername(username: $username) {...CluiOutput}}}}, fragment CluiOutput on CluiOutput {... on CluiSuccessOutput {message, json}, ... on CluiErrorOutput {error, json}, ... on CluiMarkdownOutput {markdown}, ... on CluiComponentOutput {component}, ... on CluiTableOutput {columns {label, key}, rows}}",
	"notifications": "query notifications($after: String, $count: Int, $seen: Boolean) {notifications(after: $after, count: $count, seen: $seen) {items {...NotificationItems}, pageInfo {nextCursor}}}, fragment NotificationItems on Notification {... on BasicNotification {id, ...BasicNotificationItemNotification}, ... on MentionedInPostNotification {id, ...NotificationItemMentionedInPostNotification}, ... on RepliedToPostNotification {id, ...NotificationItemRepliedToPostNotification}, ... on MentionedInCommentNotification {id, ...NotificationItemMentionedInCommentNotification}, ... on RepliedToCommentNotification {id, ...NotificationItemRepliedToCommentNotification}, ... on AnswerAcceptedNotification {id, ...NotificationItemAnswerAcceptedNotification}, ... on MultiplayerInvitedNotification {id, ...NotificationItemMultiplayerInvitedNotification}, ... on MultiplayerJoinedEmailNotification {id, ...NotificationItemMultiplayerJoinedEmailNotification}, ... on MultiplayerJoinedLinkNotification {id, ...NotificationItemMultiplayerJoinedLinkNotification}, ... on MultiplayerOverlimitNotification {id, ...NotificationItemMultiplayerOverlimitNotification}, ... on WarningNotification {id, ...NotificationItemWarningNotification}, ... on AnnotationNotification {id, ...NotificationItemAnnotationNotification}, ... on ThreadNotification {id, ...NotificationItemThreadNotification}, ... on TeamInviteNotification {id, ...NotificationItemTeamInviteNotification}, ... on TeamOrganizationInviteNotification {id, ...NotificationItemTeamOrganizationInviteNotification}, ... on TeamTemplateSubmittedNotification {id, ...NotificationTeamTemplateSubmittedNotification}, ... on TeamTemplateReviewedStatusNotification {id, ...NotificationTeamTemplateReviewedStatusNotification}, ... on EditRequestCreatedNotification {id}, ... on EditRequestAcceptedNotification {id}, ... on ReplCommentCreatedNotification {id, ...NotificationReplCommentCreatedNotification}, ... on ReplCommentReplyCreatedNotification {id, ...NotificationReplCommentReplyCreatedNotification}, ... on ReplCommentMentionNotification {id, ...NotificationReplCommentMentionNotification}, ... on NewFollowerNotification {id, ...NotificationItemNewFollower}}, fragment BasicNotificationItemNotification on BasicNotification {id, text, url, timeCreated, seen, context}, fragment NotificationItemMentionedInPostNotification on MentionedInPostNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, post {id, ...NotificationItemPost, board {id, ...NotificationItemBoard}}}, fragment NotificationItemCreator on User {username}, fragment NotificationItemPost on Post {id, title, url}, fragment NotificationItemBoard on Board {id, name, url, color, slug}, fragment NotificationItemRepliedToPostNotification on RepliedToPostNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, comment {id, post {id, ...NotificationItemPost, board {id, ...NotificationItemBoard}}}}, fragment NotificationItemMentionedInCommentNotification on MentionedInCommentNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, comment {id, post {id, ...NotificationItemPost, board {id, ...NotificationItemBoard}}}}, fragment NotificationItemRepliedToCommentNotification on RepliedToCommentNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, comment {id, post {id, ...NotificationItemPost, board {id, ...NotificationItemBoard}}}}, fragment NotificationItemAnswerAcceptedNotification on AnswerAcceptedNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, post {id, ...NotificationItemPost, board {id, ...NotificationItemBoard}}}, fragment NotificationItemMultiplayerInvitedNotification on MultiplayerInvitedNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}}, fragment NotificationItemMultiplayerJoinedEmailNotification on MultiplayerJoinedEmailNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}}, fragment NotificationItemMultiplayerJoinedLinkNotification on MultiplayerJoinedLinkNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}}, fragment NotificationItemMultiplayerOverlimitNotification on MultiplayerOverlimitNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}}, fragment NotificationItemWarningNotification on WarningNotification {id, text, url, timeCreated, seen}, fragment NotificationItemAnnotationNotification on AnnotationNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}}, fragment NotificationItemThreadNotification on ThreadNotification {id, text, url, timeCreated, seen, creator {id, ...NotificationItemCreator}, participants {id, ...NotificationItemCreator}, thread {id, repl {id, url, slug, nextPagePathname, user {id, username}}}}, fragment NotificationItemTeamInviteNotification on TeamInviteNotification {id, text, url, timeCreated, seen, invite {id, ...NotificationItemTeamInvite}}, fragment NotificationItemTeamInvite on TeamInvite {id, team {id, displayName, username}}, fragment NotificationItemTeamOrganizationInviteNotification on TeamOrganizationInviteNotification {id, text, url, timeCreated, seen, invite {id, ...NotificationItemTeamOrganizationInvite}}, fragment NotificationItemTeamOrganizationInvite on TeamOrganizationInvite {id, organization {id, name}}, fragment NotificationTeamTemplateSubmittedNotification on TeamTemplateSubmittedNotification {id, text, url, timeCreated, seen, repl {id, url}}, fragment NotificationTeamTemplateReviewedStatusNotification on TeamTemplateReviewedStatusNotification {id, text, url, timeCreated, seen, repl {id, url}}, fragment NotificationReplCommentCreatedNotification on ReplCommentCreatedNotification {id, url, timeCreated, seen, replComment {id, ...NotificationReplCommentNotificationReplComment}, creator {id, ...NotificationItemCreator}}, fragment NotificationReplCommentNotificationReplComment on ReplComment {id}, fragment NotificationReplCommentReplyCreatedNotification on ReplCommentReplyCreatedNotification {id, timeCreated, seen, creator {id, ...NotificationItemCreator}, replComment {id, ...NotificationReplCommentNotificationReplComment}}, fragment NotificationReplCommentMentionNotification on ReplCommentMentionNotification {id, timeCreated, seen, creator {id, ...NotificationItemCreator}, replComment {id, ...NotificationReplCommentNotificationReplComment}}, fragment NotificationItemNewFollower on NewFollowerNotification {id, timeCreated, seen, creator {...NotificationItemCreator}}",
	"trash": "query Query {clui {trash {view {...CluiOutput}}}}, fragment CluiOutput on CluiOutput {... on CluiSuccessOutput {message, json}, ... on CluiErrorOutput {error, json}, ... on CluiMarkdownOutput {markdown}, ... on CluiComponentOutput {component}, ... on CluiTableOutput {columns {label, key}, rows}}",
	"restore": "mutation Mutation($title: String!) {clui {trash {restore(title: $title) {...CluiOutput}}}}, fragment CluiOutput on CluiOutput {... on CluiSuccessOutput {message, json}, ... on CluiErrorOutput {error, json}, ... on CluiMarkdownOutput {markdown}, ... on CluiComponentOutput {component}, ... on CluiTableOutput {columns {label, key}, rows}}",
	"follow": "mutation SetFollowing($input: setFollowingInput!) {setFollowing(input: $input) {... on FollowResult {targetUser {id, isFollowedByCurrentUser, followerCount}}, ... on NotFoundError {message}, ... on UnauthorizedError {message}, ... on UserError {message}}}",
	"following": "query FollowModalFollows($username: String!, $after: String, $count: Int) {currentUser {id}, user: userByUsername(username: $username) {id, follows(after: $after, count: $count) {items {id, ...FollowModalUser}, pageInfo {hasNextPagenextCursor}}}}, fragment FollowModalUser on User {...UserLinkUser, id, username, fullName, image, isFollowedByCurrentUser, followerCount}, fragment UserLinkUser on User {id, url, username}",
	"followers": "query FollowModalFollowers($username: String!, $after: String, $count: Int) {currentUser {id}, user: userByUsername(username: $username) {id, followers(after: $after, count: $count) {items {id, ...FollowModalUser}, pageInfo {hasNextPage, nextCursor}}}}, fragment FollowModalUser on User {...UserLinkUser, id, username, fullName, image, isFollowedByCurrentUser, followerCount}, fragment UserLinkUser on User {id, url, username}",
}

module.exports = queries;
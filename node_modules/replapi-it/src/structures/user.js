const ReplManager = require("../managers/replmanager.js");
const Dashboard = require("./dashboard.js");
const PostManager = require("../managers/postmanager.js");
const CommentManager = require("../managers/commentmanager.js");
const Queries = require("../utils/queries.js");
const Collection = require("../utils/collection.js");

class User {
	constructor(client, data = {}) {
		this.client = client;
		this.repls = new ReplManager(this.client, this);
		this.posts = new PostManager(this.client, this);
		this.comments = new CommentManager(this.client, this);
		for (let [key, value] of Object.entries(data)) {
			if (key == "roles") {this.roles = value.map(r => new Role(this.client, r)); continue};
			if (key == "timeCreated") {this.timeCreated = new Date(value); continue};
			this[key] = value;
		}
	}
	follow() {
		this.client.graphql(Queries.follow, {input: {targetUserId: this.id, shouldFollow: true}}).then(() => this.isFollowedByCurrentUser = true);
	}
	unfollow() {
		this.client.graphql(Queries.follow, {input: {targetUserId: this.id, shouldFollow: false}}).then(() => this.isFollowedByCurrentUser = false);
	}
	async fetchFollowers(count = 20) {
		let res = await this.client.graphql(Queries.followers, {username: this.username, count});
		let followers = res.user.followers.items.map(user => new User(this.client, user));
		followers = followers.reduce((obj, user) => Object.assign(obj, { [user.username]: user }), {});
		followers = new Map(Object.entries(followers));
		return followers
	}
	async fetchFollowing(count = 20) {
		let res = await this.client.graphql(Queries.followers, {username: this.username, count});
		let followers = res.user.followers.items.map(user => new User(this.client, user));
		followers = followers.reduce((obj, user) => Object.assign(obj, { [user.username]: user }), {});
		followers = new Map(Object.entries(followers));
		return followers
	}
}

class ClientUser extends User {
	constructor(client, data = {}) {
		super(client, data);
		this.dashboard = new Dashboard(this.client);
	}
}

class Role {
	constructor(client, data = {}) {
		this.client = client;
		for (let [key, value] of Object.entries(data)) {
			this[key] = value;
		}
	}
}

module.exports = {User, ClientUser};